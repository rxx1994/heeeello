简单的字符串对齐
左对齐
str.ljust()
右对齐
str.rjust()
中心对齐
str.center()
括号里面可以填上数字，代表这个字符串占多少位
会自动用空格或者在数字之后指定的符号来填充空白的部分

通过textwrap模块
可以很方便的格式化字符串输出
textwrap.fills(text,n)
会将text按照n个占位每行的方式格式化
在n后面还可以加上
initial_indent=''
在开头用引号内的字符占位
或者用
subsequent_indent=''
在除第一行之外的每一行都用指定字符占位
！！！终端大小可以用os.get_terminal_size()来确定，这样就可以指定一个匹配终端大小的格式


也可以用format()来对齐
format(str,'>或<或^加数字作为指定的宽度')
如果想要用指定的字符而不是空格来填充
可以在>,<,^的前面写上这个字符
这个函数可以用来格式化任何值，比如可以输出保留了n位小数的数字化字符串



！！！
之前学到过
.format()
括号里面的值可以替换掉之前用{}括起来的值（可以是变量）
在输出的时候很有用
如果在当前的变量域中能找到这个变量的话，可以用
format_map(vars())
来直接替换掉变量
vars(n)
代表了在当前域中可以找到的变量n的值，也就是在这样的情况下输出，会直接用n的值代替原来的{}
这个值是一一对应的，所以注意匹配的问题
如果变量缺失，会报错

封装程序：
import sys

def sub(text):
    return text.format_map(safesub(sys._getframe(1).f_locals))
可以用来批量处理这个操作
safesub会在值缺失的时候返回一个占位符，也就是之前{}和里面的东西，而不是一个异常

高级的处理_missing_()暂时不会
！！！


想要连接两个字符串，可以用
join()
用法拓展
''.join()
前面可以输入字符，这样在连接的时候会将这个字符添加到中间，比如空格或逗号

最简单的用来连接的操作符就是
+
而且在写字符串的时候，每个字符串之间什么都不加也可以让它们自动连接在一起

但是+在遇到大量字符串的时候不适用，因为会一直创建新的字符串对象占内存
所以在使用的时候要注意字符串大小，不然执行会很慢

如果要连接大量的小字符串，可以用
yield
来产生输出片段，也就是将这些值返回到一个列表里面
然后用join将它们合并到一起

